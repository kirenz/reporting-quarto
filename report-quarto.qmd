---
title: "Hello world!" 
execute:
  echo: false # dont show code
format: 
  html: # output format
    code-fold: true # if we show code, use as fold
    theme: 
      - sketchy # a html theme (try cosmo or darkly)
      - custom.scss # additional custom scss
    toc: true # table of content
    number-depth: 3 # deepest level 
    toc-title: Contents # content title
    toc-location: left # toc alignment
    number-sections: true # use numbering
    html-math-method: mathjax # displays mathematical notation 
    smooth-scroll: true # smooth scrolling
jupyter: python3 # use python
---



## Quarto

Quarto is an open-source scientific and technical publishing system built on [Pandoc](https://pandoc.org/) (a universal document converter).

It supports executable Python code blocks within markdown. This allows you to create fully reproducible documents and reports.

HTML documents rendered with Quarto use Bootstrap 5 by default. This can be disabled or customized via the `theme` option. Take a look a at the [different themes](https://quarto.org/docs/output-formats/html-themes.html)


## Markdown

Markdown is an easy to read and write text format:

- It's _plain text_ so works well with version control
- It can be **rendered** into HTML, PDF, and more
- Learn more at: <https://quarto.org/docs/authoring/>


### Callout

::: {.callout-note}
Note that there are five types of callouts, including:
`note`, `warning`, `important`, `tip`, and `caution`.
:::

::: {.callout-tip}
## Tip With Caption

This is an example of a callout with a caption.
:::

::: {.callout-caution collapse="true"}
## Expand To Learn About Collapse

This is an example of a 'folded' caution callout that can be expanded by the user. You can use `collapse="true"` to collapse it by default or `collapse="false"` to make a collapsible callout that is expanded by default.
:::


### Tables

Some markdown options to create tables.



Table example 1:

| Default | Left | Right | Center |
|---------|:-----|------:|:------:|
| 12      | 12   |    12 |   12   |
| 123     | 123  |   123 |  123   |
| 1       | 1    |     1 |   1    |

: Demonstration of pipe table syntax



Table example 2:

::: {#tbl-panel layout-ncol=2}
| Col1 | Col2 | Col3 |
|------|------|------|
| A    | B    | C    |
| E    | F    | G    |
| A    | G    | G    |

: First Table {#tbl-first}

| Col1 | Col2 | Col3 |
|------|------|------|
| A    | B    | C    |
| E    | F    | G    |
| A    | G    | G    |

: Second Table {#tbl-second}

Main Caption
:::

See @tbl-panel for details, especially @tbl-second.



Table example 3:


+---------------+---------------+--------------------+
| Fruit         | Price         | Advantages         |
+===============+===============+====================+
| Bananas       | $1.34         | - built-in wrapper |
|               |               | - bright color     |
+---------------+---------------+--------------------+
| Oranges       | $2.10         | - cures scurvy     |
|               |               | - tasty            |
+---------------+---------------+--------------------+

: Sample grid table.


## Python code cells

Here is a Python code output:

```{python}
#| echo: false
 
import os
os.cpu_count()
```



Let's create a table with tabulate and display the code:

```{python}
#| label: tbl-planets
#| tbl-cap: Planets
#| echo: true

from IPython.display import Markdown
from tabulate import tabulate

table = [["Sun",696000,1989100000],
         ["Earth",6371,5973.6],
         ["Moon",1737,73.5],
         ["Mars",3390,641.85]]

Markdown(tabulate(
  table, 
  headers=["Planet","R (km)", "mass (x 10^29 kg)"]
))
```


Create an interactive plot with altair:

```{python}
#| label: fig-plot
#| fig-cap: "A plot"

import pandas as pd
import altair as alt
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)


ROOT = "https://raw.githubusercontent.com/kirenz/datasets/master/"
DATA = "loan50.csv"

df = pd.read_csv(ROOT + DATA)

alt.Chart(df).mark_circle(size=60).encode(
    x=alt.X('total_income', 
            title='Total income ($)'),
    y=alt.Y('loan_amount', 
            title='Loan amount ($)'),
    tooltip=['total_income', 'loan_amount']
).interactive()

```


```{python}

alt.Chart(df).mark_circle(size=60).encode(
    x=alt.X('total_income', 
            title='Total income ($)'),
    y=alt.Y('loan_amount', 
            title='Loan amount ($)'),
    tooltip=['total_income', 'loan_amount']
).interactive()
```


## Equation

Use LaTeX to write equations:

$$
\chi' = \sum_{i=1}^n k_i s_i^2
$$


## Tabsets

Create a tabset via a markdown div with the class name panel-tabset (e.g. ::: {.panel-tabset}). Each top-level heading within the div creates a new tab. For example, here is the markdown used to implement the first two tabs displayed above:

::: {.panel-tabset}
## R

``` {.r}
fizz_buzz <- function(fbnums = 1:50) {
  output <- dplyr::case_when(
    fbnums %% 15 == 0 ~ "FizzBuzz",
    fbnums %% 3 == 0 ~ "Fizz",
    fbnums %% 5 == 0 ~ "Buzz",
    TRUE ~ as.character(fbnums)
  )
  print(output)
}
```

## Python

``` {.python}
def fizz_buzz(num):
  if num % 15 == 0:
    print("FizzBuzz")
  elif num % 5 == 0:
    print("Buzz")
  elif num % 3 == 0:
    print("Fizz")
  else:
    print(num)
```
:::


Tabset group

::: {.panel-tabset group="language"}
## R

Tab content

## Python

Tab content
:::



## Diagrams

Quarto has native support for embedding [Mermaid](https://mermaid-js.github.io/mermaid/#/) and Graphviz diagrams. This enables you to create flowcharts, sequence diagrams, state diagrams, gnatt charts, and more using a plain text syntax inspired by markdown.

```{mermaid}
flowchart LR
  A[Hard edge] --> B(Round edge)
  B --> C{Decision}
  C --> D[Result one]
  C --> E[Result two]
```

Mermaid can render user journey diagrams:


```{mermaid}
journey
    title My working day
    section Go to work
      Make tea: 5: Me
      Go upstairs: 3: Me
      Do work: 1: Me, Cat
    section Go home
      Go downstairs: 5: Me
      Sit down: 5: Me
```

## CSS



SASS theme files can define both variables that globally set things like colors and fonts, as well as rules that define more fine grained behavior. To customize an existing Bootstrap theme with your own set of variables and/or rules, just provide the base theme and then your custom theme file(s):

- <https://github.com/twbs/bootstrap/blob/main/scss/_variables.scss>

- <https://github.com/quarto-dev/quarto-cli/tree/main/src/resources/formats/html/bootstrap/themes>
